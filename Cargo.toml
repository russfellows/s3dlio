[workspace]
members = [".", "crates/s3dlio-oplog"]

# Workspace-level package metadata that can be inherited by all members
[workspace.package]
version = "0.8.18"
edition = "2021"
authors = ["Russ Fellows"]
license = "AGPL-3.0"

[package]
name = "s3dlio"
version.workspace = true
edition.workspace = true

[lib]
name = "s3dlio"
crate-type = ["cdylib", "rlib"]      # cdylib → Python wheel, rlib → normal Rust

[package.metadata.maturin]
features = ["extension-module"]

[[bin]]
name = "s3-cli"
path = "src/bin/cli.rs"

[dependencies]
aws-config         = "^1"
aws-sdk-s3         = "^1"

# Azure SDK crates (keep minor versions flexible; they evolve together)
azure_core = { version = "0.27.0" }          # Response/Body, paging, errors
azure_identity = { version = "0.27.0" }      # DefaultAzureCredential
azure_storage_blob = { version = "0.4.0" }   # Blob/Container/BlockBlob clients

# Google Cloud Storage SDK (using gcloud-storage - part of google-cloud-rust)
gcloud-storage = "^1.1"                      # GCS client with ADC support

# Logging (tracing ecosystem for compatibility with dl-driver/s3-bench)
tracing = { version = "^0.1", features = ["log"] }  # Main tracing API with log compat
tracing-subscriber = { version = "^0.3", features = ["env-filter", "fmt"] }  # Subscriber for formatting
tracing-log = "^0.2"  # Bridge to capture log crate messages from dependencies

# --- async / net stack ----------------------------------------------------
tokio   = { version = "^1", features = ["full"] }
tokio-stream = { version = "^0.1", features = ["sync"] }
hyper   = { version = "^1", features = ["client"] }		# ← Upgraded
hyper-util = { version = "^0.1", features = ["client-legacy", "tokio"] }  # ← Added for HTTP client config
hyper-rustls = "^0.27"                                		# ← matches hyper ^1
aws-smithy-http-client = { version = "1.1.0", features = ["rustls-aws-lc"] }
aws-smithy-runtime-api = "^1.9"                         # ← Added for HTTP client types
rustls  = { version = "^0.23" }					# ← matches hyper‑rustls 0.27
webpki-roots = "^0.26"

# --- util / CLI / etc. ----------------------------------------------------
once_cell   = "^1.19"
dotenvy     = "^0.15"
anyhow      = "^1"
thiserror   = "1.0"
clap        = { version = "4", features = ["derive"] }
indicatif   = { version = "0.17", features = ["rayon"] }
serde       = { version = "^1.0", features = ["derive"] }
serde_json  = "^1.0"
regex       = "1.11"
futures     = "^0.3"
rand        = { version = "^0.9", features = ["std", "alloc"] }
rand_chacha = { version = "^0.3" }
rand_pcg    = { version = "^0.3" }
bytemuck    = "^1.14"
tempfile    = "^3.20"
tfrecord    = "^0.15"
bytes       = "^1.10"
#zip        = { version = "^0.5", default-features = false }
zip         = { version = "^2.1", default-features = false }

# System-level I/O support
libc        = "^0.2"

# Not certain which hdf5 gives best set of features
#hdf5 = { package = "hdf5-metno", version = "0.10.1" }
hdf5-metno = "^0.10"
hdf5-metno-sys = "^0.10"

# -------- Python bindings ----------
pyo3           = { version = "^0.25", features = ["extension-module"], optional = true }
pyo3-async-runtimes = { version = "^0.25", features = ["tokio-runtime"], optional = true }
numpy        = "^0.25"
ndarray      = "^0.15"
ndarray-npy = "^0.8"

# Other
rayon       = { version = "^1.10" }
num_cpus    = "^1.16"
chrono      = "^0.4"
#io          = "^0.02"
io          = "^0.0"
crc32fast   = "^1.4"
glob        = "^0.3"

# Performance monitoring
hdrhistogram = "^7.5"    # High Dynamic Range histograms for detailed analysis
metrics     = "^0.23"    # Metrics collection framework with histogram support
parking_lot = "^0.12"    # High-performance RwLock for metrics

async-trait  = "^0.1"
async-stream = "^0.3"
futures-core = "^0.3"
futures-util = "^0.3"

zstd         = "^0.13"
humantime    = "^2.2"
tokio-sync   = "^0.1.8"
base64 = "0.22.1"

# --- Arrow backend (optional, enabled via "arrow-backend" feature) -------
object_store = { version = "0.12", default-features = false, features = ["aws", "azure", "http", "gcp"], optional = true }
url = { version = "2.5", optional = true }

# --- Enhanced HTTP client with HTTP/2 support --------------------------------
reqwest = { version = "0.12", features = ["rustls-tls", "http2", "hickory-dns"], optional = true }

# --- High-performance memory and file I/O ------------------------------------
nix = { version = "0.29", features = ["fs"], optional = true }  # For O_DIRECT and positioned I/O

# --- Profiling (optional, enabled via "profiling" feature) ---------------
# tracing and tracing-subscriber are now main dependencies above
console-subscriber = { version = "0.4", optional = true }
pprof             = { version = "0.13", features = ["flamegraph"], optional = true }


[dev-dependencies]
tokio         = { version = "1", features = ["macros", "rt-multi-thread"] }
tokio-sync   = "^0.1.8"
futures-util  = "^0.3"
async-trait   = "^0.1"   # needed by the mock datasets
criterion     = { version = "0.5", features = ["html_reports"] }

[features]
#default = []
default = ["s3", "native-backends"]
s3 = []
native-backends = []                    # Current AWS/Azure implementations  
arrow-backend = ["dep:object_store", "dep:url"]  # Apache Arrow object_store backend
enhanced-http = ["dep:reqwest"]      # Enhanced HTTP client with HTTP/2 support
direct-io = ["dep:nix"]              # O_DIRECT file I/O for high-performance storage
profiling = ["dep:console-subscriber", "dep:pprof"]  # tracing deps now always available
extension-module = ["dep:pyo3", "dep:pyo3-async-runtimes"]     # suppresses the cfg warning when building the wheel
experimental-http-client = []        # Enable custom hyper_builder optimizations (requires patched aws-smithy-http-client)

# NOTE: Custom aws-smithy-http-client patches are DISABLED by default
# The fork-patches/aws-smithy-http-client/ directory contains experimental HTTP connection
# pool configuration changes that were tested but showed no measurable performance benefit.
# Keeping fork available for reference/experimentation but not forcing downstream users
# to patch their dependencies.
#
# To enable experimental HTTP client optimizations (NOT RECOMMENDED):
# 1. Uncomment the [patch.crates-io] section below
# 2. Build with: cargo build --features experimental-http-client
#
# [patch.crates-io]
# aws-smithy-http-client = { path = "fork-patches/aws-smithy-http-client" }

[[example]]
name = "s3_backend_comparison"
path = "examples/s3_backend_comparison.rs"

[[bench]]
name = "performance_microbenchmarks"
harness = false

[[bench]]
name = "simple_test"
harness = false

