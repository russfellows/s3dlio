use anyhow::Result;
use bytes::Bytes;
//use hdf5_metno::{ file::{FileBuilder}, plist::file_access::FileAccessBuilder, };
use hdf5_metno::File;
use std::io::Read;
use tempfile::NamedTempFile;

/// Build an HDF5 file entirely in RAM using the **CORE** driver, return it as `Bytes`.
pub fn build_hdf5(elements: usize, element_size: usize, data: &[u8]) -> Result<Bytes> {
    /* temp path that never hits disk because CORE backs it */
    let tmp = NamedTempFile::new()?;

    /* FileBuilder with core driver */
    let mut builder = File::with_options();
    {
        let fapl = builder.fapl();          // &mut FileAccessBuilder
        fapl.core();
        //fapl.core_filebacked(false);        // backing_store = false means do not create file
        fapl.core_filebacked(true);        // backing_store = true means create a file
    }
    let file = builder.create(tmp.path())?; // create the inâ€‘mem file

    /* single dataset */
    file.new_dataset::<u8>()
        .shape([elements * element_size])
        .create("data")?
        .write(data)?;

    drop(file);                             // flush to CORE buffer

    /* copy image back to Vec<u8> */
    let mut vec = Vec::new();
    std::fs::File::open(tmp.path())?.read_to_end(&mut vec)?;
    Ok(Bytes::from(vec))
}

